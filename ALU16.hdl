// ALU16.hdl
// ALU de 16 bits extendida para soportar cin, cout y ovfl

CHIP ALU16 {
    IN  x[16], y[16], zx, nx, zy, ny, f, no, cin;
    OUT out[16], zr, ng, cout, ovfl;

    PARTS:
    // Preprocesamiento de x
    Mux16(a=x, b=false, sel=zx, out=x1);
    Not16(in=x1, out=nx1);
    Mux16(a=x1, b=nx1, sel=nx, out=x2);

    // Preprocesamiento de y
    Mux16(a=y, b=false, sel=zy, out=y1);
    Not16(in=y1, out=ny1);
    Mux16(a=y1, b=ny1, sel=ny, out=y2);

    // Suma y AND
    Add16Ext(a=x2, b=y2, cin=cin, out=sum, cout=cout, ovfl=ovfl);
    And16(a=x2, b=y2, out=and);
    Mux16(a=and, b=sum, sel=f, out=out1);

    // Negaci√≥n final
    Not16(in=out1, out=notOut);
    Mux16(a=out1, b=notOut, sel=no, out=out);

    // Bandera negativo
    And(a=out[15], b=true, out=ng);

    // Bandera cero
    Or8Way(in=out[0..7], out=orLow);
    Or8Way(in=out[8..15], out=orHigh);
    Or(a=orLow, b=orHigh, out=notZr);
    Not(in=notZr, out=zr);
}
